{"version":3,"sources":["../../src/controllers/users.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Container } from 'typedi';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { User } from '@interfaces/users.interface';\nimport { UserService } from '@services/users.service';\n\nexport class UserController {\n  private userService = Container.get(UserService);\n\n  public getUsers = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const users: User[] = await this.userService.findAllUser();\n      res.status(200).json({ data: users, message: 'findAll' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public getUserById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const userId = Number(req.params.id);\n      const user: User = await this.userService.findUserById(userId);\n      res.status(200).json({ data: user, message: 'findOne' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public createUser = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const userData: CreateUserDto = req.body;\n      const newUser: User = await this.userService.createUser(userData);\n      res.status(201).json({ data: newUser, message: 'created' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public updateUser = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const userId = Number(req.params.id);\n      const userData: CreateUserDto = req.body;\n      const updatedUser: User = await this.userService.updateUser(userId, userData);\n      res.status(200).json({ data: updatedUser, message: 'updated' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public deleteUser = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const userId = Number(req.params.id);\n      const deletedUser: User = await this.userService.deleteUser(userId);\n      res.status(200).json({ data: deletedUser, message: 'deleted' });\n    } catch (error) {\n      next(error);\n    }\n  };\n}\n"],"names":["UserController","userService","Container","get","UserService","getUsers","req","res","next","users","findAllUser","status","json","data","message","error","getUserById","userId","Number","params","id","user","findUserById","createUser","userData","body","newUser","updateUser","updatedUser","deleteUser","deletedUser"],"mappings":";;;;+BAMaA;;;eAAAA;;;wBALa;8BAGE;;;;;;;;;;;;;;AAErB,IAAA,AAAMA,iBAAN,MAAMA;;QACX,uBAAQC,eAAcC,iBAAS,CAACC,GAAG,CAACC,yBAAW;QAE/C,uBAAOC,YAAW,OAAOC,KAAcC,KAAeC;YACpD,IAAI;gBACF,MAAMC,QAAgB,MAAM,IAAI,CAACR,WAAW,CAACS,WAAW;gBACxDH,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMJ;oBAAOK,SAAS;gBAAU;YACzD,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;QAEA,uBAAOC,eAAc,OAAOV,KAAcC,KAAeC;YACvD,IAAI;gBACF,MAAMS,SAASC,OAAOZ,IAAIa,MAAM,CAACC,EAAE;gBACnC,MAAMC,OAAa,MAAM,IAAI,CAACpB,WAAW,CAACqB,YAAY,CAACL;gBACvDV,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMQ;oBAAMP,SAAS;gBAAU;YACxD,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;QAEA,uBAAOQ,cAAa,OAAOjB,KAAcC,KAAeC;YACtD,IAAI;gBACF,MAAMgB,WAA0BlB,IAAImB,IAAI;gBACxC,MAAMC,UAAgB,MAAM,IAAI,CAACzB,WAAW,CAACsB,UAAU,CAACC;gBACxDjB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMa;oBAASZ,SAAS;gBAAU;YAC3D,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;QAEA,uBAAOY,cAAa,OAAOrB,KAAcC,KAAeC;YACtD,IAAI;gBACF,MAAMS,SAASC,OAAOZ,IAAIa,MAAM,CAACC,EAAE;gBACnC,MAAMI,WAA0BlB,IAAImB,IAAI;gBACxC,MAAMG,cAAoB,MAAM,IAAI,CAAC3B,WAAW,CAAC0B,UAAU,CAACV,QAAQO;gBACpEjB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMe;oBAAad,SAAS;gBAAU;YAC/D,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;QAEA,uBAAOc,cAAa,OAAOvB,KAAcC,KAAeC;YACtD,IAAI;gBACF,MAAMS,SAASC,OAAOZ,IAAIa,MAAM,CAACC,EAAE;gBACnC,MAAMU,cAAoB,MAAM,IAAI,CAAC7B,WAAW,CAAC4B,UAAU,CAACZ;gBAC5DV,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMiB;oBAAahB,SAAS;gBAAU;YAC/D,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;;AACF"}