{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { Service } from 'typedi';\nimport { DB } from '@database';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@/exceptions/httpException';\nimport { User } from '@interfaces/users.interface';\n\n@Service()\nexport class UserService {\n  public async findAllUser(): Promise<User[]> {\n    const users: User[] = await DB.Users.findAll();\n    return users;\n  }\n\n  public async findUserById(userId: number): Promise<User> {\n    const user: User = await DB.Users.findByPk(userId);\n    if (!user) throw new HttpException(409, \"User doesn't exist\");\n\n    return user;\n  }\n\n  public async createUser(userData: CreateUserDto): Promise<User> {\n    const existingUser: User = await DB.Users.findOne({\n      where: { email: userData.email },\n    });\n    if (existingUser) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const newUser: User = await DB.Users.create({\n      ...userData,\n      password: hashedPassword,\n    });\n    return newUser;\n  }\n\n  public async updateUser(userId: number, userData: CreateUserDto): Promise<User> {\n    const userToUpdate: User = await DB.Users.findByPk(userId);\n    if (!userToUpdate) throw new HttpException(409, \"User doesn't exist\");\n\n    const hashedPassword = await hash(userData.password, 10);\n    await DB.Users.update({ ...userData, password: hashedPassword }, { where: { id: userId } });\n\n    const updatedUser: User = await DB.Users.findByPk(userId);\n    return updatedUser;\n  }\n\n  public async deleteUser(userId: number): Promise<User> {\n    const userToDelete: User = await DB.Users.findByPk(userId);\n    if (!userToDelete) throw new HttpException(409, \"User doesn't exist\");\n\n    await DB.Users.destroy({ where: { id: userId } });\n\n    return userToDelete;\n  }\n}\n"],"names":["UserService","findAllUser","users","DB","Users","findAll","findUserById","userId","user","findByPk","HttpException","createUser","userData","existingUser","findOne","where","email","hashedPassword","hash","password","newUser","create","updateUser","userToUpdate","update","id","updatedUser","deleteUser","userToDelete","destroy"],"mappings":";;;;+BAQaA;;;eAAAA;;;wBARQ;wBACG;0BACL;+BAEW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIvB,IAAA,AAAMA,cAAN,MAAMA;IACX,MAAaC,cAA+B;QAC1C,MAAMC,QAAgB,MAAMC,YAAE,CAACC,KAAK,CAACC,OAAO;QAC5C,OAAOH;IACT;IAEA,MAAaI,aAAaC,MAAc,EAAiB;QACvD,MAAMC,OAAa,MAAML,YAAE,CAACC,KAAK,CAACK,QAAQ,CAACF;QAC3C,IAAI,CAACC,MAAM,MAAM,IAAIE,4BAAa,CAAC,KAAK;QAExC,OAAOF;IACT;IAEA,MAAaG,WAAWC,QAAuB,EAAiB;QAC9D,MAAMC,eAAqB,MAAMV,YAAE,CAACC,KAAK,CAACU,OAAO,CAAC;YAChDC,OAAO;gBAAEC,OAAOJ,SAASI,KAAK;YAAC;QACjC;QACA,IAAIH,cAAc,MAAM,IAAIH,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAEE,SAASI,KAAK,CAAC,eAAe,CAAC;QAE5F,MAAMC,iBAAiB,MAAMC,IAAAA,YAAI,EAACN,SAASO,QAAQ,EAAE;QACrD,MAAMC,UAAgB,MAAMjB,YAAE,CAACC,KAAK,CAACiB,MAAM,CAAC,wCACvCT;YACHO,UAAUF;;QAEZ,OAAOG;IACT;IAEA,MAAaE,WAAWf,MAAc,EAAEK,QAAuB,EAAiB;QAC9E,MAAMW,eAAqB,MAAMpB,YAAE,CAACC,KAAK,CAACK,QAAQ,CAACF;QACnD,IAAI,CAACgB,cAAc,MAAM,IAAIb,4BAAa,CAAC,KAAK;QAEhD,MAAMO,iBAAiB,MAAMC,IAAAA,YAAI,EAACN,SAASO,QAAQ,EAAE;QACrD,MAAMhB,YAAE,CAACC,KAAK,CAACoB,MAAM,CAAC,wCAAKZ;YAAUO,UAAUF;YAAkB;YAAEF,OAAO;gBAAEU,IAAIlB;YAAO;QAAE;QAEzF,MAAMmB,cAAoB,MAAMvB,YAAE,CAACC,KAAK,CAACK,QAAQ,CAACF;QAClD,OAAOmB;IACT;IAEA,MAAaC,WAAWpB,MAAc,EAAiB;QACrD,MAAMqB,eAAqB,MAAMzB,YAAE,CAACC,KAAK,CAACK,QAAQ,CAACF;QACnD,IAAI,CAACqB,cAAc,MAAM,IAAIlB,4BAAa,CAAC,KAAK;QAEhD,MAAMP,YAAE,CAACC,KAAK,CAACyB,OAAO,CAAC;YAAEd,OAAO;gBAAEU,IAAIlB;YAAO;QAAE;QAE/C,OAAOqB;IACT;AACF"}